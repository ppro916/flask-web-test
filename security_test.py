import os
import random
import string
import time
import requests
import threading
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from stem import Signal
from stem.control import Controller
from flask import Flask, request

# ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§® (GitHub ‡§µ‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§¨‡§¶‡§≤‡§æ!)
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
TELEGRAM_CHAT_ID = "YOUR_TELEGRAM_CHAT_ID"
FLASK_PORT = 7700  # ‡§§‡•Å‡§Æ‡§ö‡§æ Flask ‡§™‡•ã‡§∞‡•ç‡§ü
TEST_OTP = "000000"  # ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§¨‡•Ö‡§ï‡§°‡•ã‡§∞ OTP

app = Flask(__name__)

def send_telegram(message):
    """‡§ü‡•á‡§≤‡§ø‡§ó‡•ç‡§∞‡§æ‡§Æ‡§µ‡§∞ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§™‡§æ‡§†‡§µ‡§æ"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        requests.post(url, json={"chat_id": TELEGRAM_CHAT_ID, "text": message})
    except Exception as e:
        print(f"Telegram error: {e}")

def rotate_tor_ip():
    """TOR IP ‡§Ö‡•Ö‡§°‡•ç‡§∞‡•á‡§∏ ‡§¨‡§¶‡§≤‡§æ"""
    try:
        with Controller.from_port(port=9051) as controller:
            controller.authenticate()
            controller.signal(Signal.NEWNYM)
        print("IP rotated via TOR")
    except Exception as e:
        print(f"TOR rotation failed: {e}")

def generate_credentials():
    """‡§Ø‡•Å‡§®‡§ø‡§ï ‡§à‡§Æ‡•á‡§≤ ‡§Ü‡§£‡§ø ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ"""
    username = ''.join(random.choices(string.ascii_lowercase, k=8))
    email = f"{username}@securitytest.com"
    password = ''.join(random.choices(string.ascii_letters + string.digits + '!@#$%', k=12))
    return email, password

def simulate_attack():
    """‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ"""
    chrome_options = Options()
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument(f"user-agent=Mozilla/5.0 (Android {random.randint(10,14)}; Mobile; rv:109.0) Gecko/20100101 Firefox/118.0")
    
    # Termux ‡§Æ‡§ß‡•ç‡§Ø‡•á ChromeDriver ‡§∏‡•á‡§ü‡§Ö‡§™
    driver = webdriver.Chrome(
        executable_path="/data/data/com.termux/files/home/chromedriver",
        options=chrome_options
    )
    
    try:
        email, password = generate_credentials()
        rotate_tor_ip()  # ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡•á‡§≥‡•Ä ‡§®‡§µ‡•Ä‡§® IP
        
        driver.get(f"http://127.0.0.1:{FLASK_PORT}/register")
        time.sleep(2)
        
        # ‡§´‡•â‡§∞‡•ç‡§Æ ‡§≠‡§∞‡§£‡•á
        driver.find_element(By.NAME, "email").send_keys(email)
        driver.find_element(By.NAME, "password").send_keys(password)
        driver.find_element(By.NAME, "otp").send_keys(TEST_OTP)
        
        # ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡§£‡•á
        driver.find_element(By.XPATH, "//button[@type='submit']").click()
        time.sleep(3)
        
        # ‡§ü‡•á‡§≤‡§ø‡§ó‡•ç‡§∞‡§æ‡§Æ‡§µ‡§∞ ‡§™‡§æ‡§†‡§µ‡§£‡•á
        message = f"üî• ‡§®‡§µ‡•Ä‡§® ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§§‡§Ø‡§æ‡§∞ ‡§ù‡§æ‡§≤‡•á!\n\nEMAIL: {email}\nPASSWORD: {password}\nIP: {current_tor_ip()}"
        send_telegram(message)
        
        print(f"‡§∏‡§´‡§≤‡§§‡§æ: {email}")
    except Exception as e:
        error_msg = f"‚ùå ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä: {str(e)}"
        send_telegram(error_msg)
        print(error_msg)
    finally:
        driver.quit()

def current_tor_ip():
    """‡§∏‡§ß‡•ç‡§Ø‡§æ‡§ö‡§æ TOR IP ‡§™‡§§‡•ç‡§§‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ"""
    try:
        session = requests.session()
        session.proxies = {'http': 'socks5://127.0.0.1:9050'}
        return session.get("https://api.ipify.org").text
    except:
        return "IP Unknown"

def start_attacks(interval=30):
    """‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ö‡§æ‡§ö‡§£‡•ç‡§Ø‡§æ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ"""
    while True:
        simulate_attack()
        time.sleep(interval)

@app.route('/')
def home():
    return "Security Testing Server Running"

def start_flask():
    """Flask ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡§æ"""
    app.run(host='0.0.0.0', port=FLASK_PORT)

if __name__ == "__main__":
    print("""
    ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§∏‡•Å‡§∞‡•Ç ‡§π‡•ã‡§§ ‡§Ü‡§π‡•á...
    ‡§ö‡§∞‡§£ 1: TOR ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§∞ (‡§™‡•ã‡§∞‡•ç‡§ü 9050)
    ‡§ö‡§∞‡§£ 2: Flask ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü (‡§™‡•ã‡§∞‡•ç‡§ü 7700)
    ‡§ö‡§∞‡§£ 3: ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ö‡§æ‡§ö‡§£‡•ç‡§Ø‡§æ
    """)
    
    # ‡§Æ‡§≤‡•ç‡§ü‡•Ä‡§•‡•ç‡§∞‡•á‡§°‡§ø‡§Ç‡§ó ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® ‡§∏‡§∞‡•ç‡§µ ‡§ï‡§æ‡§π‡•Ä ‡§è‡§ï‡§æ‡§ö ‡§´‡§æ‡§à‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á
    threading.Thread(target=start_flask, daemon=True).start()
    threading.Thread(target=start_attacks, daemon=True).start()
    
    # ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§•‡•ç‡§∞‡•á‡§° ‡§ï‡§æ‡§Ø‡§Æ ‡§ö‡§æ‡§≤‡•Ç ‡§†‡•á‡§µ‡§æ
    while True:
        time.sleep(3600)
